version: "3"

tasks:
  dev:
    desc: Run server in dev
    deps: [dev-server, dev-ui]

  dev-ui:
    desc: Run frontend in dev
    cmds:
      - pnpm dev

  dev-server:
    desc: Build frontend and backend in development mode
    deps: [docs]
    cmds:
      - swag init -g cmd/server/main.go -o docs
      - go run ./cmd/server -enable-docs

  test:
    cmds:
      - go test ./...

  docs:
    desc: Generate Swagger documentation
    cmds:
      - swag init -g cmd/server/main.go -o docs

  build:
    desc: Build frontend and backend
    deps: [docs, build-ui]
    cmds:
      - go build -o dist/mediago-player.exe ./cmd/server

  build-ui:
    desc: Build frontend app only
    cmds:
      - cd ui && pnpm build
      - rm -rf assets/ui
      - cp -r ui/dist/. assets/ui

  run:
    cmds:
      - ./dist/server

  release:npm:clean:
    desc: Clean npm release artifacts
    cmds:
      - rm -rf release/npm
      - find npm -type d -name bin -exec rm -rf {} + 2>/dev/null || true

  release:npm:build-ui:
    desc: Build UI for npm release
    deps: [docs]
    cmds:
      - swag init -g cmd/server/main.go -o docs
      - cd ui && pnpm build
      - rm -rf assets/ui
      - cp -r ui/dist/. assets/ui

  release:npm:build-binaries:
    desc: Cross-compile Go binaries for all platforms
    deps: [release:npm:build-ui]
    cmds:
      - task: release:npm:build-binary
        vars: { GOOS: darwin, GOARCH: amd64, PLATFORM: darwin-x64 }
      - task: release:npm:build-binary
        vars: { GOOS: darwin, GOARCH: arm64, PLATFORM: darwin-arm64 }
      - task: release:npm:build-binary
        vars: { GOOS: linux, GOARCH: amd64, PLATFORM: linux-x64 }
      - task: release:npm:build-binary
        vars: { GOOS: linux, GOARCH: arm64, PLATFORM: linux-arm64 }
      - task: release:npm:build-binary
        vars: { GOOS: windows, GOARCH: amd64, PLATFORM: win32-x64 }
      - task: release:npm:build-binary
        vars: { GOOS: windows, GOARCH: arm64, PLATFORM: win32-arm64 }

  release:npm:build-binary:
    internal: true
    vars:
      EXT: '{{if eq .GOOS "windows"}}.exe{{end}}'
      OUTPUT_DIR: release/npm/{{.PLATFORM}}/bin
    cmds:
      - mkdir -p {{.OUTPUT_DIR}}
      - CGO_ENABLED=0 GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="-s -w" -o {{.OUTPUT_DIR}}/mediago-player{{.EXT}} ./cmd/server
      - echo "Built {{.PLATFORM}} binary"

  release:npm:assemble-packages:
    desc: Assemble npm packages with metadata
    deps: [release:npm:build-binaries]
    cmds:
      - node scripts/generate-npm-packages.js {{.VERSION}}
      - task: release:npm:copy-binaries
      - task: release:npm:set-permissions
      - echo "Assembled npm packages for version {{.VERSION}}"

  release:npm:copy-binaries:
    internal: true
    cmds:
      - mkdir -p npm/@mediago/player-darwin-x64/bin
      - cp release/npm/darwin-x64/bin/mediago-player npm/@mediago/player-darwin-x64/bin/
      - mkdir -p npm/@mediago/player-darwin-arm64/bin
      - cp release/npm/darwin-arm64/bin/mediago-player npm/@mediago/player-darwin-arm64/bin/
      - mkdir -p npm/@mediago/player-linux-x64/bin
      - cp release/npm/linux-x64/bin/mediago-player npm/@mediago/player-linux-x64/bin/
      - mkdir -p npm/@mediago/player-linux-arm64/bin
      - cp release/npm/linux-arm64/bin/mediago-player npm/@mediago/player-linux-arm64/bin/
      - mkdir -p npm/@mediago/player-win32-x64/bin
      - cp release/npm/win32-x64/bin/mediago-player.exe npm/@mediago/player-win32-x64/bin/
      - mkdir -p npm/@mediago/player-win32-arm64/bin
      - cp release/npm/win32-arm64/bin/mediago-player.exe npm/@mediago/player-win32-arm64/bin/

  release:npm:set-permissions:
    internal: true
    cmds:
      - chmod +x npm/@mediago/player-darwin-x64/bin/mediago-player || true
      - chmod +x npm/@mediago/player-darwin-arm64/bin/mediago-player || true
      - chmod +x npm/@mediago/player-linux-x64/bin/mediago-player || true
      - chmod +x npm/@mediago/player-linux-arm64/bin/mediago-player || true

  release:npm:publish:
    desc: Publish npm packages (requires PUBLISH=true)
    deps: [release:npm:assemble-packages]
    cmds:
      - task: release:npm:verify-publish
      - cd npm/@mediago/player-darwin-x64 && npm publish --access public
      - cd npm/@mediago/player-darwin-arm64 && npm publish --access public
      - cd npm/@mediago/player-linux-x64 && npm publish --access public
      - cd npm/@mediago/player-linux-arm64 && npm publish --access public
      - cd npm/@mediago/player-win32-x64 && npm publish --access public
      - cd npm/@mediago/player && npm publish --access public
      - echo "Published version {{.VERSION}} to npm"

  release:npm:verify-publish:
    internal: true
    preconditions:
      - sh: '[ "{{.PUBLISH}}" = "true" ]'
        msg: "Set PUBLISH=true to publish to npm"
      - sh: '[ -n "{{.VERSION}}" ]'
        msg: "VERSION must be set (e.g., VERSION=1.2.3)"

  release:npm:
    desc: Full npm release pipeline (set VERSION=x.y.z, optionally PUBLISH=true)
    cmds:
      - task: release:npm:clean
      - task: release:npm:assemble-packages
        vars: { VERSION: '{{.VERSION | default "0.0.0"}}' }
      - |
        if [ "{{.PUBLISH}}" = "true" ]; then
          task release:npm:publish VERSION={{.VERSION}}
        else
          echo "Dry run completed. Set PUBLISH=true to publish to npm."
        fi
